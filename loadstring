local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local mouse = player:GetMouse()

-- Aimbot settings
local settings = {
    enabled = false,
    key = Enum.KeyCode.E,
    teamCheck = true,  -- Won't target teammates
    maxDistance = 1000, -- Maximum distance to detect players
    sensitivity = 0.5, -- Lower value = smoother camera movement
    fov = 100, -- Field of view for targeting (in pixels)
    showFOV = true, -- Show FOV circle
}

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AimbotGUI"
ScreenGui.Parent = player.PlayerGui

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 200, 0, 220)
Frame.Position = UDim2.new(0.85, 0, 0.4, 0)
Frame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui

local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = Frame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Text = "Aimbot Settings"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16
Title.Font = Enum.Font.SourceSansBold
Title.Parent = TitleBar

local Content = Instance.new("Frame")
Content.Size = UDim2.new(1, 0, 1, -30)
Content.Position = UDim2.new(0, 0, 0, 30)
Content.BackgroundTransparency = 1
Content.Parent = Frame

-- Enabled Toggle
local EnabledLabel = Instance.new("TextLabel")
EnabledLabel.Size = UDim2.new(0.6, 0, 0, 30)
EnabledLabel.Position = UDim2.new(0.05, 0, 0, 10)
EnabledLabel.BackgroundTransparency = 1
EnabledLabel.Text = "Enabled:"
EnabledLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
EnabledLabel.TextSize = 14
EnabledLabel.TextXAlignment = Enum.TextXAlignment.Left
EnabledLabel.Font = Enum.Font.SourceSans
EnabledLabel.Parent = Content

local EnabledButton = Instance.new("TextButton")
EnabledButton.Size = UDim2.new(0.25, 0, 0, 20)
EnabledButton.Position = UDim2.new(0.7, 0, 0, 15)
EnabledButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
EnabledButton.Text = "OFF"
EnabledButton.TextColor3 = Color3.fromRGB(255, 255, 255)
EnabledButton.TextSize = 14
EnabledButton.Font = Enum.Font.SourceSansBold
EnabledButton.Parent = Content

-- Team Check Toggle
local TeamCheckLabel = Instance.new("TextLabel")
TeamCheckLabel.Size = UDim2.new(0.6, 0, 0, 30)
TeamCheckLabel.Position = UDim2.new(0.05, 0, 0, 50)
TeamCheckLabel.BackgroundTransparency = 1
TeamCheckLabel.Text = "Team Check:"
TeamCheckLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TeamCheckLabel.TextSize = 14
TeamCheckLabel.TextXAlignment = Enum.TextXAlignment.Left
TeamCheckLabel.Font = Enum.Font.SourceSans
TeamCheckLabel.Parent = Content

local TeamCheckButton = Instance.new("TextButton")
TeamCheckButton.Size = UDim2.new(0.25, 0, 0, 20)
TeamCheckButton.Position = UDim2.new(0.7, 0, 0, 55)
TeamCheckButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
TeamCheckButton.Text = "ON"
TeamCheckButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TeamCheckButton.TextSize = 14
TeamCheckButton.Font = Enum.Font.SourceSansBold
TeamCheckButton.Parent = Content

-- FOV Slider
local FOVLabel = Instance.new("TextLabel")
FOVLabel.Size = UDim2.new(0.6, 0, 0, 30)
FOVLabel.Position = UDim2.new(0.05, 0, 0, 90)
FOVLabel.BackgroundTransparency = 1
FOVLabel.Text = "FOV Size: 100"
FOVLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
FOVLabel.TextSize = 14
FOVLabel.TextXAlignment = Enum.TextXAlignment.Left
FOVLabel.Font = Enum.Font.SourceSans
FOVLabel.Parent = Content

local FOVSlider = Instance.new("Frame")
FOVSlider.Size = UDim2.new(0.9, 0, 0, 6)
FOVSlider.Position = UDim2.new(0.05, 0, 0, 120)
FOVSlider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
FOVSlider.BorderSizePixel = 0
FOVSlider.Parent = Content

local FOVSliderFill = Instance.new("Frame")
FOVSliderFill.Size = UDim2.new(settings.fov/400, 0, 1, 0)
FOVSliderFill.BackgroundColor3 = Color3.fromRGB(65, 175, 255)
FOVSliderFill.BorderSizePixel = 0
FOVSliderFill.Parent = FOVSlider

local FOVSliderButton = Instance.new("TextButton")
FOVSliderButton.Size = UDim2.new(0, 16, 0, 16)
FOVSliderButton.Position = UDim2.new(settings.fov/400, -8, 0.5, -8)
FOVSliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
FOVSliderButton.Text = ""
FOVSliderButton.Parent = FOVSlider

-- Show FOV Toggle
local ShowFOVLabel = Instance.new("TextLabel")
ShowFOVLabel.Size = UDim2.new(0.6, 0, 0, 30)
ShowFOVLabel.Position = UDim2.new(0.05, 0, 0, 130)
ShowFOVLabel.BackgroundTransparency = 1
ShowFOVLabel.Text = "Show FOV:"
ShowFOVLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ShowFOVLabel.TextSize = 14
ShowFOVLabel.TextXAlignment = Enum.TextXAlignment.Left
ShowFOVLabel.Font = Enum.Font.SourceSans
ShowFOVLabel.Parent = Content

local ShowFOVButton = Instance.new("TextButton")
ShowFOVButton.Size = UDim2.new(0.25, 0, 0, 20)
ShowFOVButton.Position = UDim2.new(0.7, 0, 0, 135)
ShowFOVButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
ShowFOVButton.Text = "ON"
ShowFOVButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ShowFOVButton.TextSize = 14
ShowFOVButton.Font = Enum.Font.SourceSansBold
ShowFOVButton.Parent = Content

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(0.9, 0, 0, 20)
StatusLabel.Position = UDim2.new(0.05, 0, 0, 170)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Press E to toggle aimbot"
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.TextSize = 14
StatusLabel.TextXAlignment = Enum.TextXAlignment.Center
StatusLabel.Font = Enum.Font.SourceSans
StatusLabel.Parent = Content

-- Create FOV Circle
local FOVCircle = Instance.new("Frame")
FOVCircle.Size = UDim2.new(0, 0, 0, 0) -- Set by UpdateFOVCircle function
FOVCircle.AnchorPoint = Vector2.new(0.5, 0.5)
FOVCircle.BackgroundTransparency = 1
FOVCircle.Parent = ScreenGui

local FOVCircleOutline = Instance.new("UIStroke")
FOVCircleOutline.Color = Color3.fromRGB(65, 175, 255)
FOVCircleOutline.Thickness = 2
FOVCircleOutline.Parent = FOVCircle

local FOVCircleCorner = Instance.new("UICorner")
FOVCircleCorner.CornerRadius = UDim.new(1, 0)
FOVCircleCorner.Parent = FOVCircle

-- Function to update FOV circle position and size
local function UpdateFOVCircle()
    if settings.showFOV then
        FOVCircle.Visible = true
        FOVCircle.Position = UDim2.new(0.5, 0, 0.5, 0)
        FOVCircle.Size = UDim2.new(0, settings.fov * 2, 0, settings.fov * 2)
    else
        FOVCircle.Visible = false
    end
end

-- Update FOV circle immediately
UpdateFOVCircle()

-- GUI button functionality
EnabledButton.MouseButton1Click:Connect(function()
    settings.enabled = not settings.enabled
    if settings.enabled then
        EnabledButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
        EnabledButton.Text = "ON"
        StatusLabel.Text = "Aimbot Active - Press E to lock"
    else
        EnabledButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        EnabledButton.Text = "OFF"
        StatusLabel.Text = "Press E to toggle aimbot"
    end
end)

TeamCheckButton.MouseButton1Click:Connect(function()
    settings.teamCheck = not settings.teamCheck
    if settings.teamCheck then
        TeamCheckButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
        TeamCheckButton.Text = "ON"
    else
        TeamCheckButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        TeamCheckButton.Text = "OFF"
    end
end)

ShowFOVButton.MouseButton1Click:Connect(function()
    settings.showFOV = not settings.showFOV
    if settings.showFOV then
        ShowFOVButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
        ShowFOVButton.Text = "ON"
    else
        ShowFOVButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        ShowFOVButton.Text = "OFF"
    end
    UpdateFOVCircle()
end)

-- FOV Slider Functionality
local draggingSlider = false

FOVSliderButton.MouseButton1Down:Connect(function()
    draggingSlider = true
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = UserInputService:GetMouseLocation()
        local sliderPos = FOVSlider.AbsolutePosition
        local sliderSize = FOVSlider.AbsoluteSize
        
        local relativeX = math.clamp((mousePos.X - sliderPos.X) / sliderSize.X, 0, 1)
        FOVSliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
        FOVSliderButton.Position = UDim2.new(relativeX, -8, 0.5, -8)
        
        -- Update FOV (10-400 range)
        settings.fov = math.floor(relativeX * 390 + 10)
        FOVLabel.Text = "FOV Size: " .. settings.fov
        
        -- Update FOV circle
        UpdateFOVCircle()
    end
end)

-- Function to check if a player is in FOV
local function isInFOV(targetPlayer)
    local screenPos, onScreen = camera:WorldToScreenPoint(targetPlayer.Character.Head.Position)
    if not onScreen then return false end
    
    local centerScreen = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distance = (Vector2.new(screenPos.X, screenPos.Y) - centerScreen).Magnitude
    
    return distance <= settings.fov
end

-- Function to check if a player is valid to target
local function isValidTarget(targetPlayer)
    if targetPlayer == player then return false end
    if targetPlayer.Character == nil then return false end
    if not targetPlayer.Character:FindFirstChild("Head") then return false end
    if not targetPlayer.Character:FindFirstChild("Humanoid") then return false end
    if targetPlayer.Character.Humanoid.Health <= 0 then return false end
    
    -- FOV check
    if not isInFOV(targetPlayer) then return false end
    
    -- Team check
    if settings.teamCheck and targetPlayer.Team == player.Team then return false end
    
    -- Check for obstacles (basic raycast)
    local ray = Ray.new(camera.CFrame.Position, (targetPlayer.Character.Head.Position - camera.CFrame.Position).Unit * settings.maxDistance)
    local hit, position = workspace:FindPartOnRay(ray, player.Character, false, true)
    
    if hit and hit:IsDescendantOf(targetPlayer.Character) then
        return true
    elseif not hit then
        return true
    end
    
    return false
end

-- Function to get closest player
local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = settings.maxDistance
    local closestScreenDistance = settings.fov

    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player and p.Character and p.Character:FindFirstChild("Head") then
            local screenPos, onScreen = camera:WorldToScreenPoint(p.Character.Head.Position)
            
            if onScreen then
                local centerScreen = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - centerScreen).Magnitude
                
                if screenDistance <= settings.fov then
                    if isValidTarget(p) then
                        local worldDistance = (p.Character.Head.Position - player.Character.Head.Position).Magnitude
                        
                        -- Prioritize players closer to FOV center
                        if screenDistance < closestScreenDistance then
                            closestPlayer = p
                            closestScreenDistance = screenDistance
                            shortestDistance = worldDistance
                        end
                    end
                end
            end
        end
    end
    
    return closestPlayer
end

-- Target locking variables
local targetPlayer = nil
local isAiming = false

-- Input handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == settings.key and settings.enabled then
        isAiming = not isAiming
        
        if isAiming then
            targetPlayer = getClosestPlayer()
            if targetPlayer then
                StatusLabel.Text = "Locked on: " .. targetPlayer.Name
            else
                StatusLabel.Text = "No valid target found"
                isAiming = false
            end
        else
            StatusLabel.Text = "Aimbot Active - Press E to lock"
            targetPlayer = nil
        end
    end
end)

-- Aiming logic
RunService.RenderStepped:Connect(function()
    -- Always update FOV circle position to center of screen
    FOVCircle.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    if isAiming and targetPlayer and settings.enabled then
        if isValidTarget(targetPlayer) then
            local targetPosition = targetPlayer.Character.Head.Position
            
            -- Smoothly move camera towards target
            local targetCFrame = CFrame.new(camera.CFrame.Position, targetPosition)
            camera.CFrame = camera.CFrame:Lerp(targetCFrame, settings.sensitivity)
        else
            -- Target no longer valid
            isAiming = false
            targetPlayer = nil
            StatusLabel.Text = "Target lost"
        end
    end
end)

-- Make GUI draggable
local dragging = false
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)
