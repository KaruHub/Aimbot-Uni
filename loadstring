local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local mouse = player:GetMouse()

-- Drawing library elements
local drawings = {}

-- Aimbot settings
local settings = {
    enabled = true,
    aimbot_fov = 100,
    smoothing = 5,
    smoothing_type = "Linear",
    randomization = 0,
    deadzone_fov = 1,
    aimbot_key = Enum.KeyCode.Mouse1,
    hitscan_priority = "Head",
    hitscan_points = 5,
    adjust_for_drop = false,
    target_prediction = false,
    enlarge_hitboxes = false,
    
    -- Trigger Bot
    trigger_enabled = true,
    trigger_hitboxes = true,
    trigger_when_aiming = true,
    aim_percentage = 15,
    bullet_redirection = false,
    silent_aim = true,
    silent_aim_fov = 200,
    hit_chance = 30,
    accuracy = 90,
    hitscan_priority_trigger = "Head",
    hitscan_points_trigger = 5,
    
    -- Recoil Control
    recoil_control = true,
    weapon_rcs = 10,
    recoil_control_x = 80,
    recoil_control_y = 10
}

-- Create Drawing UI
local function createDrawingElement(type, properties)
    local element = Drawing.new(type)
    for property, value in pairs(properties) do
        element[property] = value
    end
    return element
end

-- Create menu structure
local function createMenu()
    -- Menu background
    drawings.background = createDrawingElement("Square", {
        Size = Vector2.new(550, 350),
        Position = Vector2.new(50, 50),
        Color = Color3.fromRGB(25, 25, 25),
        Filled = true,
        Visible = true,
        Transparency = 0.9,
    })
    
    -- Title bar
    drawings.titleBar = createDrawingElement("Square", {
        Size = Vector2.new(550, 30),
        Position = Vector2.new(50, 50),
        Color = Color3.fromRGB(35, 35, 35),
        Filled = true,
        Visible = true,
        Transparency = 0.9,
    })
    
    -- Title text
    drawings.titleText = createDrawingElement("Text", {
        Text = "Abyss V3",
        Position = Vector2.new(70, 56),
        Color = Color3.fromRGB(255, 255, 255),
        Size = 16,
        Font = 3, -- Use an available font
        Outline = true,
        Visible = true,
    })
    
    -- Create tabs
    local tabs = {"Main", "Rage", "Visuals", "Misc", "Settings"}
    local tabWidth = 100
    local startX = 65
    
    drawings.tabs = {}
    drawings.tabTexts = {}
    
    for i, tabName in ipairs(tabs) do
        drawings.tabs[i] = createDrawingElement("Square", {
            Size = Vector2.new(tabWidth, 25),
            Position = Vector2.new(startX + (i-1) * (tabWidth + 5), 85),
            Color = tabName == "Main" and Color3.fromRGB(65, 105, 225) or Color3.fromRGB(45, 45, 45),
            Filled = true,
            Visible = true,
            Transparency = 0.9,
        })
        
        drawings.tabTexts[i] = createDrawingElement("Text", {
            Text = tabName,
            Position = Vector2.new(startX + (i-1) * (tabWidth + 5) + 35, 89),
            Color = Color3.fromRGB(255, 255, 255),
            Size = 14,
            Font = 3,
            Center = true,
            Outline = true,
            Visible = true,
        })
    end
    
    -- Content area
    drawings.contentArea = createDrawingElement("Square", {
        Size = Vector2.new(530, 270),
        Position = Vector2.new(60, 115),
        Color = Color3.fromRGB(30, 30, 30),
        Filled = true,
        Visible = true,
        Transparency = 0.9,
    })
    
    -- Create two columns
    local columnWidth = 240
    
    -- Left column (Aim Assist)
    drawings.leftColumn = createDrawingElement("Square", {
        Size = Vector2.new(columnWidth, 260),
        Position = Vector2.new(65, 120),
        Color = Color3.fromRGB(35, 35, 35),
        Filled = true,
        Visible = true,
        Transparency = 0.9,
    })
    
    drawings.leftColumnTitle = createDrawingElement("Text", {
        Text = "Aim Assist",
        Position = Vector2.new(65 + columnWidth/2, 125),
        Color = Color3.fromRGB(255, 255, 255),
        Size = 15,
        Font = 3,
        Center = true,
        Outline = true,
        Visible = true,
    })
    
    -- Right column (Trigger Bot)
    drawings.rightColumn = createDrawingElement("Square", {
        Size = Vector2.new(columnWidth, 260),
        Position = Vector2.new(65 + columnWidth + 20, 120),
        Color = Color3.fromRGB(35, 35, 35),
        Filled = true,
        Visible = true,
        Transparency = 0.9,
    })
    
    drawings.rightColumnTitle = createDrawingElement("Text", {
        Text = "Trigger Bot",
        Position = Vector2.new(65 + columnWidth + 20 + columnWidth/2, 125),
        Color = Color3.fromRGB(255, 255, 255),
        Size = 15,
        Font = 3,
        Center = true,
        Outline = true,
        Visible = true,
    })
    
    -- Create settings items for left column (Aim Assist)
    local leftItems = {
        {name = "Enabled", value = settings.enabled, type = "toggle"},
        {name = "Aimbot FOV", value = settings.aimbot_fov .. "째/250째", type = "slider"},
        {name = "Smoothing", value = settings.smoothing .. "/10", type = "slider"},
        {name = "Smoothing Type", value = settings.smoothing_type, type = "dropdown"},
        {name = "Randomization", value = settings.randomization .. "/20", type = "slider"},
        {name = "Deadzone FOV", value = settings.deadzone_fov .. "/10", type = "slider"},
        {name = "Aimbot Key", value = "Mouse 1", type = "keybind"},
        {name = "Hitscan Priority", value = settings.hitscan_priority, type = "dropdown"},
        {name = "Hitscan Points", value = settings.hitscan_points, type = "slider"},
        {name = "Adjust for Bullet Drop", value = settings.adjust_for_drop, type = "toggle"},
        {name = "Target Prediction", value = settings.target_prediction, type = "toggle"},
        {name = "Enlarge Enemy Hitboxes", value = settings.enlarge_hitboxes, type = "toggle"}
    }
    
    -- Create settings items for right column (Trigger Bot)
    local rightItems = {
        {name = "Enabled", value = settings.trigger_enabled, type = "toggle"},
        {name = "Trigger Hitboxes", value = settings.trigger_hitboxes, type = "toggle"},
        {name = "Trigger when Aiming", value = settings.trigger_when_aiming, type = "toggle"},
        {name = "Aim Percentage", value = settings.aim_percentage .. "/100%", type = "slider"},
        {name = "Bullet Redirection", value = settings.bullet_redirection, type = "toggle"},
        {name = "Silent Aim", value = settings.silent_aim, type = "toggle"},
        {name = "Silent Aim FOV", value = settings.silent_aim_fov .. "째/250째", type = "slider"},
        {name = "Hit Chance", value = settings.hit_chance .. "/100%", type = "slider"},
        {name = "Accuracy", value = settings.accuracy .. "/100%", type = "slider"},
        {name = "Hitscan Priority", value = settings.hitscan_priority_trigger, type = "dropdown"},
        {name = "Hitscan Points", value = settings.hitscan_points_trigger, type = "slider"}
    }
    
    -- Draw left column items
    drawings.leftItems = {}
    for i, item in ipairs(leftItems) do
        local yPos = 145 + (i-1) * 22
        
        -- Item label
        drawings.leftItems[i] = {
            label = createDrawingElement("Text", {
                Text = item.name,
                Position = Vector2.new(75, yPos),
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Font = 2,
                Outline = true,
                Visible = true,
            })
        }
        
        -- Item value (toggle, slider, etc.)
        if item.type == "toggle" then
            local color = item.value and Color3.fromRGB(65, 175, 65) : Color3.fromRGB(175, 65, 65)
            drawings.leftItems[i].value = createDrawingElement("Square", {
                Size = Vector2.new(15, 15),
                Position = Vector2.new(280, yPos),
                Color = color,
                Filled = true,
                Visible = true,
                Transparency = 1,
            })
        elseif item.type == "slider" or item.type == "dropdown" or item.type == "keybind" then
            drawings.leftItems[i].value = createDrawingElement("Text", {
                Text = tostring(item.value),
                Position = Vector2.new(280, yPos),
                Color = Color3.fromRGB(150, 150, 255),
                Size = 14,
                Font = 2,
                Outline = true,
                Visible = true,
            })
        end
    end
    
    -- Draw right column items
    drawings.rightItems = {}
    for i, item in ipairs(rightItems) do
        local yPos = 145 + (i-1) * 22
        
        -- Item label
        drawings.rightItems[i] = {
            label = createDrawingElement("Text", {
                Text = item.name,
                Position = Vector2.new(75 + columnWidth + 20, yPos),
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Font = 2,
                Outline = true,
                Visible = true,
            })
        }
        
        -- Item value (toggle, slider, etc.)
        if item.type == "toggle" then
            local color = item.value and Color3.fromRGB(65, 175, 65) : Color3.fromRGB(175, 65, 65)
            drawings.rightItems[i].value = createDrawingElement("Square", {
                Size = Vector2.new(15, 15),
                Position = Vector2.new(280 + columnWidth + 20, yPos),
                Color = color,
                Filled = true,
                Visible = true,
                Transparency = 1,
            })
        elseif item.type == "slider" or item.type == "dropdown" then
            drawings.rightItems[i].value = createDrawingElement("Text", {
                Text = tostring(item.value),
                Position = Vector2.new(280 + columnWidth + 20, yPos),
                Color = Color3.fromRGB(150, 150, 255),
                Size = 14,
                Font = 2,
                Outline = true,
                Visible = true,
            })
        end
    end
    
    -- Create FOV circle
    drawings.fovCircle = createDrawingElement("Circle", {
        Radius = settings.aimbot_fov,
        Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2),
        Color = Color3.fromRGB(65, 175, 255),
        Thickness = 1.5,
        NumSides = 48,
        Filled = false,
        Visible = true,
        Transparency = 0.6,
    })
    
    -- Create silent aim FOV circle
    drawings.silentFovCircle = createDrawingElement("Circle", {
        Radius = settings.silent_aim_fov,
        Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2),
        Color = Color3.fromRGB(255, 100, 100),
        Thickness = 1,
        NumSides = 48,
        Filled = false,
        Visible = settings.silent_aim,
        Transparency = 0.4,
    })
}

-- Menu dragging functionality
local isDragging = false
local dragOffset = Vector2.new(0, 0)

local function updateMenuPosition(newPosition)
    local offset = Vector2.new(0, 0)
    
    drawings.background.Position = newPosition
    drawings.titleBar.Position = newPosition
    drawings.titleText.Position = Vector2.new(newPosition.X + 20, newPosition.Y + 6)
    
    -- Update tabs
    local tabWidth = 100
    local startX = newPosition.X + 15
    
    for i, tab in ipairs(drawings.tabs) do
        tab.Position = Vector2.new(startX + (i-1) * (tabWidth + 5), newPosition.Y + 35)
        drawings.tabTexts[i].Position = Vector2.new(startX + (i-1) * (tabWidth + 5) + 35, newPosition.Y + 39)
    end
    
    -- Update content area
    drawings.contentArea.Position = Vector2.new(newPosition.X + 10, newPosition.Y + 65)
    
    -- Update columns
    local columnWidth = 240
    drawings.leftColumn.Position = Vector2.new(newPosition.X + 15, newPosition.Y + 70)
    drawings.leftColumnTitle.Position = Vector2.new(newPosition.X + 15 + columnWidth/2, newPosition.Y + 75)
    
    drawings.rightColumn.Position = Vector2.new(newPosition.X + 15 + columnWidth + 20, newPosition.Y + 70)
    drawings.rightColumnTitle.Position = Vector2.new(newPosition.X + 15 + columnWidth + 20 + columnWidth/2, newPosition.Y + 75)
    
    -- Update items
    for i, item in ipairs(drawings.leftItems) do
        local yPos = newPosition.Y + 95 + (i-1) * 22
        item.label.Position = Vector2.new(newPosition.X + 25, yPos)
        
        if item.value then
            if typeof(item.value) == "table" then
                item.value.Position = Vector2.new(newPosition.X + 230, yPos)
            else
                item.value.Position = Vector2.new(newPosition.X + 230, yPos)
            end
        end
    end
    
    for i, item in ipairs(drawings.rightItems) do
        local yPos = newPosition.Y + 95 + (i-1) * 22
        item.label.Position = Vector2.new(newPosition.X + 25 + columnWidth + 20, yPos)
        
        if item.value then
            if typeof(item.value) == "table" then
                item.value.Position = Vector2.new(newPosition.X + 230 + columnWidth + 20, yPos)
            else
                item.value.Position = Vector2.new(newPosition.X + 230 + columnWidth + 20, yPos)
            end
        end
    end
end

-- Handle mouse input for dragging
local function handleMouseInput()
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            
            -- Check if clicking in the title bar area
            if mousePos.X >= drawings.titleBar.Position.X and 
               mousePos.X <= drawings.titleBar.Position.X + drawings.titleBar.Size.X and
               mousePos.Y >= drawings.titleBar.Position.Y and
               mousePos.Y <= drawings.titleBar.Position.Y + drawings.titleBar.Size.Y then
                
                isDragging = true
                dragOffset = drawings.titleBar.Position - mousePos
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation()
            updateMenuPosition(mousePos + dragOffset)
        end
    end)
    
    -- Update FOV circle positions on camera changes
    RunService.RenderStepped:Connect(function()
        if drawings.fovCircle then
            drawings.fovCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        end
        
        if drawings.silentFovCircle then
            drawings.silentFovCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        end
    end)
}

-- Toggling the visibility of the menu
local menuVisible = true
local function toggleMenu()
    menuVisible = not menuVisible
    
    for _, drawing in pairs(drawings) do
        if typeof(drawing) == "table" then
            for _, subDrawing in pairs(drawing) do
                if typeof(subDrawing) == "table" and subDrawing.label then
                    subDrawing.label.Visible = menuVisible
                    if subDrawing.value then
                        subDrawing.value.Visible = menuVisible
                    end
                else
                    if subDrawing.Visible ~= nil then
                        subDrawing.Visible = menuVisible
                    end
                end
            end
        else
            if drawing ~= drawings.fovCircle and drawing ~= drawings.silentFovCircle then
                drawing.Visible = menuVisible
            end
        end
    end
    
    -- FOV circles should remain visible based on settings
    if drawings.fovCircle then
        drawings.fovCircle.Visible = settings.enabled
    end
    
    if drawings.silentFovCircle then
        drawings.silentFovCircle.Visible = settings.silent_aim and settings.trigger_enabled
    end
}

-- Toggle menu with Insert key
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Insert then
        toggleMenu()
    end
end)

-- Initialize the menu
local function initializeMenu()
    createMenu()
    handleMouseInput()
    
    print("Aimbot GUI initialized. Press Insert to toggle menu visibility.")
end

initializeMenu()

-- Aimbot functionality
-- Function to check if a player is in FOV
local function isInFOV(targetPlayer, fovSize)
    local screenPos, onScreen = camera:WorldToScreenPoint(targetPlayer.Character.Head.Position)
    if not onScreen then return false end
    
    local centerScreen = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distance = (Vector2.new(screenPos.X, screenPos.Y) - centerScreen).Magnitude
    
    return distance <= fovSize
end

-- Function to check if a player is valid to target
local function isValidTarget(targetPlayer)
    if targetPlayer == player then return false end
    if targetPlayer.Character == nil then return false end
    if not targetPlayer.Character:FindFirstChild("Head") then return false end
    if not targetPlayer.Character:FindFirstChild("Humanoid") then return false end
    if targetPlayer.Character.Humanoid.Health <= 0 then return false end
    
    -- Team check (replace with your own team check logic if needed)
    -- if targetPlayer.Team == player.Team then return false end
    
    return true
end

-- Function to get closest player
local function getClosestPlayer(fovSize)
    local closestPlayer = nil
    local shortestDistance = math.huge
    local closestScreenDistance = fovSize

    for _, p in pairs(Players:GetPlayers()) do
        if isValidTarget(p) then
            local screenPos, onScreen = camera:WorldToScreenPoint(p.Character.Head.Position)
            
            if onScreen then
                local centerScreen = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - centerScreen).Magnitude
                
                if screenDistance <= fovSize then
                    local worldDistance = (p.Character.Head.Position - player.Character.Head.Position).Magnitude
                    
                    if screenDistance < closestScreenDistance then
                        closestPlayer = p
                        closestScreenDistance = screenDistance
                        shortestDistance = worldDistance
                    end
                end
            end
        end
    end
    
    return closestPlayer
end

-- Target locking variables
local targetPlayer = nil
local isAiming = false

-- Input handling for aimbot
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.UserInputType == Enum.UserInputType.MouseButton1 and settings.enabled then
        isAiming = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isAiming = false
        targetPlayer = nil
    end
end)

-- Aiming logic
RunService.RenderStepped:Connect(function()
    if settings.enabled and isAiming then
        targetPlayer = getClosestPlayer(settings.aimbot_fov)
        
        if targetPlayer then
            local targetPosition = targetPlayer.Character.Head.Position
            
            if settings.randomization > 0 then
                -- Add randomization
                local randomX = (math.random() - 0.5) * settings.randomization
                local randomY = (math.random() - 0.5) * settings.randomization
                local randomZ = (math.random() - 0.5) * settings.randomization
                
                targetPosition = targetPosition + Vector3.new(randomX, randomY, randomZ)
            end
            
            -- Smoothly move camera towards target
            local targetCFrame = CFrame.new(camera.CFrame.Position, targetPosition)
            
            if settings.smoothing_type == "Linear" then
                camera.CFrame = camera.CFrame:Lerp(targetCFrame, 1 / (settings.smoothing + 1))
            else
                -- Exponential smoothing
                local delta = targetCFrame.LookVector - camera.CFrame.LookVector
                camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + camera.CFrame.LookVector + delta * (1 / (settings.smoothing + 1)))
            end
        end
    end
    
    -- Update FOV circles
    if drawings.fovCircle then
        drawings.fovCircle.Radius = settings.aimbot_fov
    end
    
    if drawings.silentFovCircle then
        drawings.silentFovCircle.Radius = settings.silent_aim_fov
    end
end)

-- Trigger bot functionality (simplified)
if settings.trigger_enabled then
    RunService.RenderStepped:Connect(function()
        if settings.trigger_when_aiming and not isAiming then
            return
        end
        
        local rayOrigin = camera.CFrame.Position
        local rayDirection = camera.CFrame.LookVector * 1000
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {player.Character}
        
        local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult and raycastResult.Instance then
            local hitPlayer = Players:GetPlayerFromCharacter(raycastResult.Instance.Parent)
            
            if hitPlayer and isValidTarget(hitPlayer) then
                -- Simulate random chance to hit based on hit_chance setting
                if math.random(1, 100) <= settings.hit_chance then
                    -- Simulate mouse click
                    mouse1press()
                    wait(0.01)
                    mouse1release()
                end
            end
        end
    end)
end
