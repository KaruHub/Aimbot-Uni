local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local mouse = player:GetMouse()

-- Drawing settings
local settings = {
    enabled = false,
    key = Enum.KeyCode.E,
    brushSize = 5,
    maxBrushSize = 50,
    brushColor = Color3.fromRGB(255, 0, 0), -- Red default
    transparency = 0.2,
    toolMode = "draw", -- "draw", "erase", "fill"
    showCursor = true,
}

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "DrawingGUI"
ScreenGui.Parent = player.PlayerGui

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 200, 0, 265)
Frame.Position = UDim2.new(0.85, 0, 0.4, 0)
Frame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui

local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = Frame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Text = "Drawing Tools"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16
Title.Font = Enum.Font.SourceSansBold
Title.Parent = TitleBar

local Content = Instance.new("Frame")
Content.Size = UDim2.new(1, 0, 1, -30)
Content.Position = UDim2.new(0, 0, 0, 30)
Content.BackgroundTransparency = 1
Content.Parent = Frame

-- Enabled Toggle
local EnabledLabel = Instance.new("TextLabel")
EnabledLabel.Size = UDim2.new(0.6, 0, 0, 30)
EnabledLabel.Position = UDim2.new(0.05, 0, 0, 10)
EnabledLabel.BackgroundTransparency = 1
EnabledLabel.Text = "Enabled:"
EnabledLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
EnabledLabel.TextSize = 14
EnabledLabel.TextXAlignment = Enum.TextXAlignment.Left
EnabledLabel.Font = Enum.Font.SourceSans
EnabledLabel.Parent = Content

local EnabledButton = Instance.new("TextButton")
EnabledButton.Size = UDim2.new(0.25, 0, 0, 20)
EnabledButton.Position = UDim2.new(0.7, 0, 0, 15)
EnabledButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
EnabledButton.Text = "OFF"
EnabledButton.TextColor3 = Color3.fromRGB(255, 255, 255)
EnabledButton.TextSize = 14
EnabledButton.Font = Enum.Font.SourceSansBold
EnabledButton.Parent = Content

-- Tool selector
local ToolModeLabel = Instance.new("TextLabel")
ToolModeLabel.Size = UDim2.new(0.6, 0, 0, 30)
ToolModeLabel.Position = UDim2.new(0.05, 0, 0, 50)
ToolModeLabel.BackgroundTransparency = 1
ToolModeLabel.Text = "Tool Mode:"
ToolModeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ToolModeLabel.TextSize = 14
ToolModeLabel.TextXAlignment = Enum.TextXAlignment.Left
ToolModeLabel.Font = Enum.Font.SourceSans
ToolModeLabel.Parent = Content

local ToolModeButton = Instance.new("TextButton")
ToolModeButton.Size = UDim2.new(0.4, 0, 0, 20)
ToolModeButton.Position = UDim2.new(0.55, 0, 0, 55)
ToolModeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 255)
ToolModeButton.Text = "DRAW"
ToolModeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToolModeButton.TextSize = 14
ToolModeButton.Font = Enum.Font.SourceSansBold
ToolModeButton.Parent = Content

-- Brush Size Slider
local BrushSizeLabel = Instance.new("TextLabel")
BrushSizeLabel.Size = UDim2.new(0.6, 0, 0, 30)
BrushSizeLabel.Position = UDim2.new(0.05, 0, 0, 90)
BrushSizeLabel.BackgroundTransparency = 1
BrushSizeLabel.Text = "Brush Size: 5"
BrushSizeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
BrushSizeLabel.TextSize = 14
BrushSizeLabel.TextXAlignment = Enum.TextXAlignment.Left
BrushSizeLabel.Font = Enum.Font.SourceSans
BrushSizeLabel.Parent = Content

local BrushSlider = Instance.new("Frame")
BrushSlider.Size = UDim2.new(0.9, 0, 0, 6)
BrushSlider.Position = UDim2.new(0.05, 0, 0, 120)
BrushSlider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
BrushSlider.BorderSizePixel = 0
BrushSlider.Parent = Content

local BrushSliderFill = Instance.new("Frame")
BrushSliderFill.Size = UDim2.new(settings.brushSize/settings.maxBrushSize, 0, 1, 0)
BrushSliderFill.BackgroundColor3 = Color3.fromRGB(65, 175, 255)
BrushSliderFill.BorderSizePixel = 0
BrushSliderFill.Parent = BrushSlider

local BrushSliderButton = Instance.new("TextButton")
BrushSliderButton.Size = UDim2.new(0, 16, 0, 16)
BrushSliderButton.AnchorPoint = Vector2.new(0.5, 0.5)
BrushSliderButton.Position = UDim2.new(settings.brushSize/settings.maxBrushSize, 0, 0.5, 0)
BrushSliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
BrushSliderButton.Text = ""
BrushSliderButton.Parent = BrushSlider

-- Color picker buttons
local ColorLabel = Instance.new("TextLabel")
ColorLabel.Size = UDim2.new(0.6, 0, 0, 30)
ColorLabel.Position = UDim2.new(0.05, 0, 0, 130)
ColorLabel.BackgroundTransparency = 1
ColorLabel.Text = "Color:"
ColorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ColorLabel.TextSize = 14
ColorLabel.TextXAlignment = Enum.TextXAlignment.Left
ColorLabel.Font = Enum.Font.SourceSans
ColorLabel.Parent = Content

-- Create a row of color buttons
local colors = {
    Color3.fromRGB(255, 0, 0),    -- Red
    Color3.fromRGB(0, 255, 0),    -- Green
    Color3.fromRGB(0, 0, 255),    -- Blue
    Color3.fromRGB(255, 255, 0),  -- Yellow
    Color3.fromRGB(255, 0, 255),  -- Magenta
    Color3.fromRGB(0, 255, 255),  -- Cyan
}

for i, color in ipairs(colors) do
    local ColorButton = Instance.new("TextButton")
    local size = 0.12
    local gap = 0.025
    local startPos = 0.15
    
    ColorButton.Size = UDim2.new(size, 0, size, 0)
    ColorButton.Position = UDim2.new(startPos + (i-1) * (size + gap), 0, 0, 145)
    ColorButton.BackgroundColor3 = color
    ColorButton.Text = ""
    ColorButton.BorderSizePixel = 1
    ColorButton.BorderColor3 = Color3.fromRGB(200, 200, 200)
    ColorButton.Parent = Content
    
    -- Highlight the currently selected color
    if color == settings.brushColor then
        ColorButton.BorderColor3 = Color3.fromRGB(255, 255, 255)
        ColorButton.BorderSizePixel = 3
    end
    
    -- Color button functionality
    ColorButton.MouseButton1Click:Connect(function()
        settings.brushColor = color
        -- Reset border for all buttons
        for _, button in ipairs(Content:GetChildren()) do
            if button:IsA("TextButton") and button ~= EnabledButton and button ~= ToolModeButton and button ~= BrushSliderButton then
                button.BorderColor3 = Color3.fromRGB(200, 200, 200)
                button.BorderSizePixel = 1
            end
        end
        -- Highlight this button
        ColorButton.BorderColor3 = Color3.fromRGB(255, 255, 255)
        ColorButton.BorderSizePixel = 3
    end)
end

-- Show cursor Toggle
local ShowCursorLabel = Instance.new("TextLabel")
ShowCursorLabel.Size = UDim2.new(0.6, 0, 0, 30)
ShowCursorLabel.Position = UDim2.new(0.05, 0, 0, 170)
ShowCursorLabel.BackgroundTransparency = 1
ShowCursorLabel.Text = "Show Cursor:"
ShowCursorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ShowCursorLabel.TextSize = 14
ShowCursorLabel.TextXAlignment = Enum.TextXAlignment.Left
ShowCursorLabel.Font = Enum.Font.SourceSans
ShowCursorLabel.Parent = Content

local ShowCursorButton = Instance.new("TextButton")
ShowCursorButton.Size = UDim2.new(0.25, 0, 0, 20)
ShowCursorButton.Position = UDim2.new(0.7, 0, 0, 175)
ShowCursorButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
ShowCursorButton.Text = "ON"
ShowCursorButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ShowCursorButton.TextSize = 14
ShowCursorButton.Font = Enum.Font.SourceSansBold
ShowCursorButton.Parent = Content

-- Clear Canvas Button
local ClearButton = Instance.new("TextButton")
ClearButton.Size = UDim2.new(0.9, 0, 0, 30)
ClearButton.Position = UDim2.new(0.05, 0, 0, 210)
ClearButton.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
ClearButton.Text = "Clear Canvas"
ClearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ClearButton.TextSize = 14
ClearButton.Font = Enum.Font.SourceSansBold
ClearButton.Parent = Content

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(0.9, 0, 0, 20)
StatusLabel.Position = UDim2.new(0.05, 0, 0, 250)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Press E to toggle drawing"
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.TextSize = 14
StatusLabel.TextXAlignment = Enum.TextXAlignment.Center
StatusLabel.Font = Enum.Font.SourceSans
StatusLabel.Parent = Content

-- Create drawing cursor
local DrawingCursor = Instance.new("Frame")
DrawingCursor.Size = UDim2.new(0, settings.brushSize * 2, 0, settings.brushSize * 2)
DrawingCursor.AnchorPoint = Vector2.new(0.5, 0.5)
DrawingCursor.BackgroundTransparency = 0.7
DrawingCursor.BackgroundColor3 = settings.brushColor
DrawingCursor.Visible = settings.showCursor and settings.enabled
DrawingCursor.Parent = ScreenGui

local CursorOutline = Instance.new("UIStroke")
CursorOutline.Color = Color3.fromRGB(255, 255, 255)
CursorOutline.Thickness = 1
CursorOutline.Parent = DrawingCursor

local CursorCorner = Instance.new("UICorner")
CursorCorner.CornerRadius = UDim.new(1, 0)
CursorCorner.Parent = DrawingCursor

-- Create canvas for drawing
local Canvas = Instance.new("Frame")
Canvas.Size = UDim2.new(1, 0, 1, 0)
Canvas.Position = UDim2.new(0, 0, 0, 0)
Canvas.BackgroundTransparency = 1
Canvas.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Canvas.Visible = true
Canvas.Parent = ScreenGui
Canvas.ZIndex = 1  -- Set to be behind other UI elements

-- Function to update drawing cursor
local function UpdateDrawingCursor()
    if settings.showCursor and settings.enabled then
        DrawingCursor.Visible = true
        DrawingCursor.Size = UDim2.new(0, settings.brushSize * 2, 0, settings.brushSize * 2)
        DrawingCursor.BackgroundColor3 = settings.brushColor
        
        if settings.toolMode == "erase" then
            DrawingCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            CursorOutline.Color = Color3.fromRGB(0, 0, 0)
        else
            CursorOutline.Color = Color3.fromRGB(255, 255, 255)
        end
    else
        DrawingCursor.Visible = false
    end
end

-- Update cursor immediately
UpdateDrawingCursor()

-- GUI button functionality
EnabledButton.MouseButton1Click:Connect(function()
    settings.enabled = not settings.enabled
    if settings.enabled then
        EnabledButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
        EnabledButton.Text = "ON"
        StatusLabel.Text = "Drawing mode active"
    else
        EnabledButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        EnabledButton.Text = "OFF"
        StatusLabel.Text = "Press E to toggle drawing"
    end
    UpdateDrawingCursor()
end)

ToolModeButton.MouseButton1Click:Connect(function()
    if settings.toolMode == "draw" then
        settings.toolMode = "erase"
        ToolModeButton.Text = "ERASE"
        ToolModeButton.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
    elseif settings.toolMode == "erase" then
        settings.toolMode = "fill"
        ToolModeButton.Text = "FILL"
        ToolModeButton.BackgroundColor3 = Color3.fromRGB(255, 180, 0)
    else
        settings.toolMode = "draw"
        ToolModeButton.Text = "DRAW"
        ToolModeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 255)
    end
    UpdateDrawingCursor()
end)

ShowCursorButton.MouseButton1Click:Connect(function()
    settings.showCursor = not settings.showCursor
    if settings.showCursor then
        ShowCursorButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
        ShowCursorButton.Text = "ON"
    else
        ShowCursorButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        ShowCursorButton.Text = "OFF"
    end
    UpdateDrawingCursor()
end)

ClearButton.MouseButton1Click:Connect(function()
    -- Remove all drawn elements
    for _, child in ipairs(Canvas:GetChildren()) do
        child:Destroy()
    end
    StatusLabel.Text = "Canvas cleared"
end)

-- Brush Size Slider Functionality
local draggingSlider = false

BrushSliderButton.MouseButton1Down:Connect(function()
    draggingSlider = true
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = UserInputService:GetMouseLocation()
        local sliderPos = BrushSlider.AbsolutePosition
        local sliderSize = BrushSlider.AbsoluteSize
        
        local relativeX = math.clamp((mousePos.X - sliderPos.X) / sliderSize.X, 0, 1)
        BrushSliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
        BrushSliderButton.Position = UDim2.new(relativeX, 0, 0.5, 0)
        
        -- Update brush size (1-50 range)
        settings.brushSize = math.floor(relativeX * settings.maxBrushSize) + 1
        BrushSizeLabel.Text = "Brush Size: " .. settings.brushSize
        
        -- Update cursor
        UpdateDrawingCursor()
    end
end)

-- Drawing variables
local isDrawing = false
local lastPoint = nil

-- Input handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == settings.key then
        settings.enabled = not settings.enabled
        if settings.enabled then
            EnabledButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
            EnabledButton.Text = "ON"
            StatusLabel.Text = "Drawing mode active"
        else
            EnabledButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
            EnabledButton.Text = "OFF"
            StatusLabel.Text = "Press E to toggle drawing"
        end
        UpdateDrawingCursor()
    end
    
    if input.UserInputType == Enum.UserInputType.MouseButton1 and settings.enabled and 
       not draggingSlider and not isMouseOverGUI() then
        isDrawing = true
        lastPoint = UserInputService:GetMouseLocation()
        
        if settings.toolMode == "fill" then
            -- Create a fill rectangle at click position
            local fillRect = Instance.new("Frame")
            fillRect.Size = UDim2.new(1, 0, 1, 0)
            fillRect.Position = UDim2.new(0, 0, 0, 0)
            fillRect.BackgroundColor3 = settings.brushColor
            fillRect.BackgroundTransparency = 0.5
            fillRect.ZIndex = 1
            fillRect.Parent = Canvas
            
            isDrawing = false
            StatusLabel.Text = "Canvas filled"
        else
            drawPoint(lastPoint)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDrawing = false
        lastPoint = nil
    end
end)

-- Function to check if mouse is over GUI elements
function isMouseOverGUI()
    local mousePos = UserInputService:GetMouseLocation()
    local guiObjects = {Frame}
    
    for _, gui in ipairs(guiObjects) do
        local absPos = gui.AbsolutePosition
        local absSize = gui.AbsoluteSize
        
        if mousePos.X >= absPos.X and mousePos.X <= absPos.X + absSize.X and
           mousePos.Y >= absPos.Y and mousePos.Y <= absPos.Y + absSize.Y then
            return true
        end
    end
    
    return false
end

-- Function to draw a point
function drawPoint(position)
    local dot = Instance.new("Frame")
    dot.Size = UDim2.new(0, settings.brushSize * 2, 0, settings.brushSize * 2)
    dot.AnchorPoint = Vector2.new(0.5, 0.5)
    dot.Position = UDim2.new(0, position.X, 0, position.Y)
    dot.BorderSizePixel = 0
    
    if settings.toolMode == "erase" then
        for _, element in ipairs(Canvas:GetChildren()) do
            -- Simple collision detection for eraser
            local dotPos = Vector2.new(position.X, position.Y)
            local elementPos = Vector2.new(
                element.AbsolutePosition.X + element.AbsoluteSize.X/2,
                element.AbsolutePosition.Y + element.AbsoluteSize.Y/2
            )
            local distance = (dotPos - elementPos).Magnitude
            
            if distance < settings.brushSize * 2 then
                element:Destroy()
            end
        end
        return
    end
    
    dot.BackgroundColor3 = settings.brushColor
    dot.ZIndex = 2
    
    local cornerRadius = Instance.new("UICorner")
    cornerRadius.CornerRadius = UDim.new(1, 0)
    cornerRadius.Parent = dot
    
    dot.Parent = Canvas
end

-- Drawing logic on mouse move
UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = UserInputService:GetMouseLocation()
        
        -- Update cursor position
        DrawingCursor.Position = UDim2.new(0, mousePos.X, 0, mousePos.Y)
        
        if isDrawing and settings.enabled and lastPoint and settings.toolMode ~= "fill" then
            -- Calculate distance between last point and current position
            local currentPoint = mousePos
            local distance = (currentPoint - lastPoint).Magnitude
            
            -- For smooth lines, interpolate points
            if distance > settings.brushSize / 2 then
                local direction = (currentPoint - lastPoint).Unit
                local stepSize = settings.brushSize / 2
                
                -- Draw points along the line
                local steps = math.floor(distance / stepSize)
                for i = 1, steps do
                    local point = lastPoint + direction * stepSize * i
                    drawPoint(point)
                end
                
                lastPoint = currentPoint
            end
        end
    end
end)

-- Make GUI draggable
local dragging = false
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)
